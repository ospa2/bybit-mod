//import type { OriginalAd, Review } from './interfaces';
import './style.css';
import { forbiddenPhrases, stopPhrases, KEYWORDS_TO_HIGHLIGHT, KEYWORDS_TO_HIDE, MIN_EXECUTED_COUNT, MAX_PRICE_DIFFERENCE, USER_ID,  MAX_PAGES, DELAY_MS } from './config';
import { initSliderReplacement } from './rangeSlider';
import { disableBodyScroll, enableBodyScroll } from './lib';

let MIN_LEFT_VALUE = 9000;
let MAX_RIGHT_VALUE = 80000;

let currentPage = 0;
let isLoading = false;
let isSequentialLoadingActive = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
let shouldStopLoading = false; // –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏


function adShouldBeFiltered(ad) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    if (parseInt(ad.finishNum) <= MIN_EXECUTED_COUNT) return true;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    const min = parseFloat(ad.minAmount);
    const max = parseFloat(ad.maxAmount);
    const diff = max - min;

    if (isNaN(min) || isNaN(max)) return true;
    if (diff > MAX_PRICE_DIFFERENCE || max >= MAX_RIGHT_VALUE || min <= MIN_LEFT_VALUE) return true;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    if (ad.remark && typeof ad.remark === 'string') {
        const remark = ad.remark.toLowerCase();
        
        

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
        for (const phrase of forbiddenPhrases) {
            if (remark.includes(phrase)) {
                return true;
            }
        }
    }

    return false;
}

function filterRemark(description) {
    let filteredText = description;

    // 1. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–æ–ø-—Ñ—Ä–∞–∑—É –≤ HTML-—Ç–µ–≥ <strong>
    stopPhrases.forEach(phrase => {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∑—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
        const regex = new RegExp(phrase.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), 'gi');
        // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –Ω–∞ —Ç—É –∂–µ —Ñ—Ä–∞–∑—É, –æ–±–µ—Ä–Ω—É—Ç—É—é –≤ <strong>
        filteredText = filteredText.replace(regex, '');
    });

    // 2. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
    filteredText = filteredText.replace(/[‚úÖüìå‚ùåüîíüéØ‚Äî]/g, '');

    // 3. –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–æ—á–µ–∫ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    filteredText = filteredText
        .replace(/\s+/g, ' ')
        .replace(/\s+\./g, '.')
        .replace(/\s+,/g, ',')
        .replace(/\.{2,}/g, '.')
        .trim();

    return filteredText;
}

function createRowFromTemplate(ad) {
    const paymentNames = {
        '75': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',//16627518
        '377': '–°–±–µ—Ä–±–∞–Ω–∫',//17762813
        '614': '–ü–°–ë',
        '382': 'SBP',//16627221
        '383': 'MIR',//19032627
        '616': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        '617': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω',
        '581': 'Tinkoff',//17201839
        '582': 'Sberbank',//16664034
        '584': 'Sberbank',
        '585': 'Sberbank',//16664050
        '612': '–£—Ä–∞–ª—Å–∏–±',
        '613': '–£—Ä–∞–ª—Å–∏–±'
    };

    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    const paymentColors = {
        '75': '#FFD700',   // –¢–∏–Ω—å–∫–æ—Ñ—Ñ - –∂–µ–ª—Ç—ã–π
        '581': '#FFD700',  // Tinkoff - –∂–µ–ª—Ç—ã–π
        '377': '#36d536ff',  // –°–±–µ—Ä–±–∞–Ω–∫ - –∑–µ–ª–µ–Ω—ã–π
        '582': '#36d536ff',  // Sberbank - –∑–µ–ª–µ–Ω—ã–π
        '585': '#36d536ff'   // Sberbank - –∑–µ–ª–µ–Ω—ã–π
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
    function getPaymentStyle(paymentId) {
        const color = paymentColors[paymentId];
        return color ? `background-color: ${color}; color: white;` : '';
    }
    const filteredRemark = filterRemark(ad.remark);

    const rowHTML = `
            <div class="dynamic-row" style="display: contents;">
                <div class="table-row" style="display: table-row;">
                    <div class="table-cell" style="display: table-cell; width: 800px; padding: 16px; vertical-align: middle;">
                        <div class="moly-space flex items-center" style="gap: 16px;">
                            <div class="moly-space-item moly-space-item-first moly-space-item-last">
                                <div class="moly-space flex-col inline-flex moly-space-vertical items-start" style="gap: 0px;">
                                    <div class="moly-space-item moly-space-item-first">
                                        <div class="moly-space flex items-center" style="gap: 0px;">
                                            <div class="moly-space-item moly-space-item-first">
                                                <div class="by-avatar by-avatar--${ad.isOnline ? 'online' : 'offline'} small">
                                                    <div class="by-avatar__container">
                                                        <div class="by-avatar__container__letter">${ad.nickName ? ad.nickName.charAt(0).toUpperCase() : 'U'}</div>
                                                        <div class="by-avatar__container__status"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="moly-space-item">
                                                <div class="inline-block">
                                                    <div class="advertiser-name">
                                                        <span>${ad.nickName || 'Unknown'}</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="moly-space-item moly-space-item-last">
                                                <div class="inline-block">
                                                    ${ad.authTag && ad.authTag.length > 0 ? ad.authTag.map(tag => `<img src="/fiat/trade/gw/static/media/vaSilverIcon.8a83d2497a7eccc3612a.png" class="advertiser-auth-tag pointer">`).join('') : ''}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="moly-space-item">
                                        <div class="advertiser-info">
                                            <span>${ad.finishNum || 0}&nbsp;–∏—Å–ø–æ–ª–Ω–µ–Ω–æ</span>
                                            <span class="delimiter">|</span>
                                            <div class="inline-block">
                                                <span class="execute-rate">${ad.recentExecuteRate || 0}&nbsp;% | ${ad.paymentPeriod || 15} –º–∏–Ω.</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="moly-space-item moly-space-item-last">
                                        <div class="moly-space flex items-baseline" style="gap: 16px;">
                                            <div class="moly-space-item moly-space-item-first" style="margin-top: 6px;">
                                                <div class="inline-block">
                                                    <span class="moly-text text-[var(--bds-gray-t2)] font-[400] inline pointer">
                                                        <img src="/fiat/trade/gw/static/media/clock.8fb8bc6c6fe17cf175ba8a0abda873f5.svg" alt="" width="14" style="vertical-align: -2px;">
                                                        ${filteredRemark}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="table-cell" style="display: table-cell; min-width: 120px; max-width: 180px; padding: 16px; vertical-align: middle;">
                        <span class="price-amount">
                            ${parseFloat(ad.price).toFixed(2)} <span class="price-unit">${ad.currencyId || 'RUB'}</span>
                        </span>
                    </div>
                    <div class="table-cell" style="display: table-cell; min-width: 220px; padding: 16px; vertical-align: middle;">                     
                        <div class="ql-value">${parseFloat(ad.minAmount || 0).toLocaleString('ru-RU', {minimumFractionDigits: 2})}&nbsp;~&nbsp;${parseFloat(ad.maxAmount || 0).toLocaleString('ru-RU', {minimumFractionDigits: 2})} ${ad.currencyId || 'RUB'}</div>
                    </div>
                    <div class="table-cell" style="display: table-cell; width: 196px; padding: 16px; vertical-align: middle;">
                        ${ad.payments?.slice(0, 3).map(paymentId =>
                            `<div class="inline-block"><div class="trade-list-tag" style="${getPaymentStyle(paymentId)}">${paymentNames[paymentId] || paymentId}</div></div>`
                        ).join('') || '<div class="inline-block"><div class="trade-list-tag">–ù–µ —É–∫–∞–∑–∞–Ω–æ</div></div>'}
                    </div>
                    <div class="table-cell trade-list-action-button" style="display: table-cell; padding: 16px; vertical-align: middle;">
                        <button class="moly-btn ${ad.side === 1 ? 'bg-greenColor-bds-green-700-normal' : 'bg-redColor-bds-red-700-normal'} text-base-bds-static-white px-[16px] py-[8px] rounded">
                            <span>${ad.side === 1 ? '–ö—É–ø–∏—Ç—å' : '–ü—Ä–æ–¥–∞—Ç—å'} ${ad.tokenId || 'USDT'}</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;

    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = rowHTML.trim();
    const newRow = tempDiv.firstChild;


    newRow.querySelector('button')?.addEventListener('click', async() => {
        const payload = {
            item_id: ad.id,
            shareCode: null
        }

        try {
            const res = await fetch("https://www.bybit.com/x-api/fiat/otc/item/simple", {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await res.json();

            // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            openTradingModal(result, ad, paymentNames);

        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ:', e);
        }
    });

    return newRow;
}

function analyzeReview(reviewText) {
    if (!reviewText) return { shouldHide: false, shouldHighlight: false };

    let shouldHide = false;
    let shouldHighlight = false;

    const searchText = reviewText.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    KEYWORDS_TO_HIDE.forEach(keyword => {
        if (keyword.trim() === '') return;
        
        const searchKeyword = keyword.toLowerCase();
        
        if (searchText === searchKeyword) {
            shouldHide = true;
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º-–æ—Ç–∑—ã–≤—ã —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Ñ—Ä–∞–∑–∞–º–∏
    const spamKeywords = ['–º–µ–¥–ª–µ–Ω–Ω—ã–π', '–≥—Ä—É–±—ã–π', '–ø—Ä–æ—Å–∏—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏','–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π','slow','rude','asks for additional fees','impatient'];

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    const textFragments = searchText.split(',').map(fragment => fragment.trim());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ —Å–ø–∞–º-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    let isSpamReview = textFragments.length > 0;
    for (let fragment of textFragments) {
        if (fragment === '') continue;
        
        let isSpamFragment = false;
        for (let spamKeyword of spamKeywords) {
            const searchSpamKeyword = spamKeyword.toLowerCase();
            if (fragment === searchSpamKeyword) {
                isSpamFragment = true;
                break;
            }
        }
        
        if (!isSpamFragment) {
            isSpamReview = false;
            break;
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–ø–∞–º-–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
    let spamKeywordCount = 0;
    for (let fragment of textFragments) {
        if (fragment === '') continue;
        
        for (let spamKeyword of spamKeywords) {
            const searchSpamKeyword = spamKeyword.toLowerCase();
            if (fragment === searchSpamKeyword) {
                spamKeywordCount++;
                break;
            }
        }
    }

    if (isSpamReview && spamKeywordCount >= 2) {
        shouldHide = true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    KEYWORDS_TO_HIGHLIGHT.forEach(keyword => {
        if (keyword.trim() === '') return;
        
        const searchKeyword = keyword.toLowerCase();
        
        if (searchText.includes(searchKeyword)) {
            shouldHighlight = true;
        }
    });

    return { shouldHide, shouldHighlight };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç–∑—ã–≤–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function createReviewHTML(review, className) {
    function convertBybitTime(bybitTimestamp) {
        const date = new Date(bybitTimestamp);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}.${month}.${year}`;
    }
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è analyzeReview
    const analysis = analyzeReview(review.appraiseContent);
    const highlightClass = analysis.shouldHighlight ? 'highlighted-review' : '';
    const formattedDate = convertBybitTime(Number(review.updateDate)); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–∑—ã–≤–∞
    return `
        <li class="${className} ${highlightClass}">           
            <p class="review-text">${formattedDate}: ${review.appraiseContent}</p>
        </li>
    `;
}

async function loadAndDisplayReviews(originalAd) {
    try {
        // --- 1. –ó–ê–ì–†–£–ó–ö–ê –ë–ê–õ–ê–ù–°–ê –ò –û–¢–ó–´–í–û–í (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        let termsContent = [];
        let curBalance = 0;

        const balancePromise = fetch("https://www.bybit.com/x-api/fiat/otc/user/availableBalance", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tokenId: "USDT" })
        }).then(res => res.json());

        const reviewsPromise = (async () => {
            let allReviews = [];
            for (let page = 1; page <= 7; page++) {
                const payload = { makerUserId: originalAd.userId, page: page.toString(), size: "10", appraiseType: "0" };
                const res = await fetch("https://www.bybit.com/x-api/fiat/otc/order/appraiseList", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const json = await res.json();
                console.log('json:', json);
                
                const pageReviews = json.result?.appraiseInfoVo || json.data?.appraiseInfoVo || [];
                allReviews = allReviews.concat(pageReviews);
                if (pageReviews.length <= 0) break;
            }
            return allReviews;
        })();

        const [moneyJson, allNegReviews] = await Promise.all([balancePromise, reviewsPromise]);
        
        curBalance = moneyJson.result[0].withdrawAmount;
        termsContent = allNegReviews; // –≠—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç–∑—ã–≤–æ–≤

        // --- 2. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê (–æ–±–Ω–æ–≤–ª–µ–Ω –±–ª–æ–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤) ---

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        const balanceElement = document.getElementById('balance-value');
        if (balanceElement) {
            balanceElement.textContent = `${parseFloat(curBalance || 0).toLocaleString('ru-RU', {minimumFractionDigits: 4, maximumFractionDigits: 4})} ${originalAd.tokenId || 'USDT'}`;
        }
        
        const availableBalanceElement = document.getElementById('available-for-trade');
        if(availableBalanceElement) {
            availableBalanceElement.textContent = `–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è ${originalAd.side === 1 ? '–ø–æ–∫—É–ø–∫–∏' : '–ø—Ä–æ–¥–∞–∂–∏'}: ${parseFloat(curBalance || 0).toLocaleString('ru-RU', {minimumFractionDigits: 4})} ${originalAd.tokenId || 'USDT'}`;
        }

        // --- –ë–õ–û–ö –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø HTML –î–õ–Ø –û–¢–ó–´–í–û–í (–∑–¥–µ—Å—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è) ---
        let reviewsHTML = '';
        let filteredCount = 0;
        let highlightedCount = 0;

        if (Array.isArray(termsContent) && termsContent.length > 0) {
            
            // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú—ã —Ç–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É –æ–±—ä–µ–∫—Ç–æ–≤, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–∫—Å—Ç–∞–º.
            termsContent.forEach(review => {
                if (!review.appraiseContent) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
                
                const analysis = analyzeReview(review.appraiseContent);
                if (analysis.shouldHide) {
                    filteredCount++;
                    return;
                }
                if (analysis.shouldHighlight) {
                    highlightedCount++;
                }
                console.log('review:', review);
                
                // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π –í–ï–°–¨ –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞.
                reviewsHTML += createReviewHTML(review, 'review-item');
            });

            if (filteredCount > 0 || highlightedCount > 0) {
                reviewsHTML = `
                    <div class="filter-info">
                        ${filteredCount > 0 ? `<span class="filtered-info">–°–∫—Ä—ã—Ç–æ —Å–ø–∞–º-–æ—Ç–∑—ã–≤–æ–≤: ${filteredCount}</span>` : ''}
                        ${highlightedCount > 0 ? `<span class="highlighted-info">–ü–æ–¥—Å–≤–µ—á–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${highlightedCount}</span>` : ''}
                    </div>
                    ${reviewsHTML}
                `;
            }
            reviewsHTML = `<ul class="reviews-list">${reviewsHTML}</ul>`;
            
            // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–±—â–µ–π –¥–ª–∏–Ω–æ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
            if (filteredCount === termsContent.length) reviewsHTML = '<div class="no-reviews">–ü–ª–æ—Ö–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç</div>';
        } else {
            reviewsHTML = '<div class="no-reviews">–ü–ª–æ—Ö–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç</div>';
        }

        const reviewsContainer = document.getElementById('reviews-container');
        if (reviewsContainer) {
            reviewsContainer.innerHTML = reviewsHTML;
        }

    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', e);
        const reviewsContainer = document.getElementById('reviews-container');
        if (reviewsContainer) {
            reviewsContainer.innerHTML = '<div class="no-reviews error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã.</div>';
        }
    }
}

async function openTradingModal(apiResult, originalAd, paymentNames) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    disableBodyScroll();
    const existingModal = document.querySelector('.bybit-modal-overlay');
    if (existingModal) {
        existingModal.remove();
    }

    const adData = apiResult?.result || originalAd;

    // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –°–†–ê–ó–£
    const overlay = document.createElement('div');
    overlay.className = 'bybit-modal-overlay';

    const modal = document.createElement('div');
    modal.className = 'bybit-modal';

    // –í—Å—Ç–∞–≤–ª—è–µ–º "—Å–∫–µ–ª–µ—Ç" –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    modal.innerHTML = `
        <div class="bybit-modal-header">
            <button class="bybit-modal-close" type="button">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M12.854 3.146a.5.5 0 0 1 0 .708l-9 9a.5.5 0 0 1-.708-.708l9-9a.5.5 0 0 1 .708 0z"/>
                    <path d="M3.146 3.146a.5.5 0 0 1 .708 0l9 9a.5.5 0 0 1-.708.708l-9-9a.5.5 0 0 1 0-.708z"/>
                </svg>
            </button>
        </div>
        <div class="bybit-modal-body">
            <div class="advertiser-panel">
                <div> 
                    <div class="advertiser-header">
                        <div class="avatar-container">
                            <div class="avatar ${originalAd.isOnline ? 'online' : ''}">
                                ${(originalAd.nickName || 'U').charAt(0).toUpperCase()}
                            </div>
                        </div>
                        <div class="advertiser-info">
                            <div class="advertiser-name">${originalAd.nickName || 'Unknown'}</div>
                            <div class="advertiser-stats">
                                <span>${originalAd.finishNum || 0} –∏—Å–ø–æ–ª–Ω–µ–Ω–æ</span>
                                <span class="stats-divider">|</span>
                                <span>${originalAd.recentExecuteRate || 0}%</span>
                            </div>
                            <div class="online-status">${originalAd.isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</div>
                        </div>
                    </div>
                    <div class="verification-tags">
                        <div class="verification-tag">–≠–ª. –ø–æ—á—Ç–∞</div>
                        <div class="verification-tag">SMS</div>
                        <div class="verification-tag">–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏</div>
                    </div>
                    <div class="crypto-info-section">
                        <div class="crypto-info-item">
                            <span class="crypto-info-label">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                            <span class="crypto-info-value" id="balance-value">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                        <div class="crypto-info-item">
                            <span class="crypto-info-label">–õ–∏–º–∏—Ç—ã</span>
                            <span class="crypto-info-value">${parseFloat(adData.minAmount || 0).toLocaleString('ru-RU')} ~ ${parseFloat(adData.maxAmount || 0).toLocaleString('ru-RU')} ${adData.currencyId || 'RUB'}</span>
                        </div>
                        <div class="crypto-info-item">
                            <span class="crypto-info-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã</span>
                            <span class="crypto-info-value">${adData.paymentPeriod || 15} –º–∏–Ω.</span>
                        </div>
                    </div>
                </div>
                <div class="terms-section">
                    <div class="terms-title">–û—Ç–∑—ã–≤—ã –æ –º–µ–π–∫–µ—Ä–µ</div>
                    <div class="terms-content" id="reviews-container">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>
            <div class="trading-panel">
                <div class="price-section">
                    <div class="price-header">
                        <span class="price-label">–¶–µ–Ω–∞</span>
                        <span class="price-timer" id="price-timer">29s</span>
                    </div>
                    <div class="price-value">${parseFloat(adData.price).toFixed(2)} ${adData.currencyId || 'RUB'}</div>
                </div>
                <div class="input-section">
                    <label class="input-label">–Ø ${adData.side === 1 ? '–∫—É–ø–ª—é' : '–ø—Ä–æ–¥–∞–º'}</label>
                    <div class="input-container" id="amount-container">
                        <div class="input-wrapper">
                            <img class="coin-icon" src="data:image/svg+xml;base64,...">
                            <input type="text" class="amount-input" id="amount-input" placeholder="0.0000" autocomplete="off">
                            <div class="input-suffix">
                                <span>${adData.tokenId || 'USDT'}</span>
                                <span class="input-divider">|</span>
                                <button type="button" class="max-button" id="max-button">–í—Å–µ</button>
                            </div>
                        </div>
                    </div>
                    <div class="balance-info" id="available-for-trade">
                        // --- –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–æ–∂–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ ---
                        –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è ${adData.side === 1 ? '–ø–æ–∫—É–ø–∫–∏' : '–ø—Ä–æ–¥–∞–∂–∏'}: –ó–∞–≥—Ä—É–∑–∫–∞...
                        <span class="info-icon">‚Ñπ</span>
                    </div>
                </div>
                <div class="input-section">
                    <label class="input-label">–Ø –ø–æ–ª—É—á—É</label>
                    <div class="input-container">
                        <div class="input-wrapper">
                            <div style="width: 24px; ...">‚ÇΩ</div>
                            <input type="text" class="amount-input" id="receive-input" placeholder="0.00" readonly>
                            <div class="input-suffix">
                                <span>${adData.currencyId || 'RUB'}</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="payment-section">
                    <label class="input-label">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
                    <div class="payment-methods">
                        ${adData.payments && adData.payments.length > 0
                            ? adData.payments.map(paymentId => `<span class="payment-method">${paymentNames[paymentId] || paymentId}</span>`).join('')
                            : '<span class="payment-method">–ù–µ —É–∫–∞–∑–∞–Ω–æ</span>'
                        }
                    </div>
                </div>
                <div class="button-section">
                    <button type="button" class="trade-button" id="trade-button">${adData.side === 1 ? '–ö—É–ø–∏—Ç—å' : '–ü—Ä–æ–¥–∞—Ç—å'} ${adData.tokenId || 'USDT'}</button>
                    <button type="button" class="cancel-button" id="cancel-button">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>
    `;

    overlay.appendChild(modal);
    document.body.appendChild(overlay);
    document.body.style.overflow = 'hidden';
    console.log('adData:', adData);
    console.log('originalAd:', originalAd);
    console.log('apiResult:', apiResult);
    
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setupHighQualityModalEvents(overlay, adData, originalAd, apiResult);
    startPriceTimer();

    // --- –ó–ê–ü–£–°–ö–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –ó–ê–ì–†–£–ó–ö–£ –î–ê–ù–ù–´–• ---
    loadAndDisplayReviews(originalAd);
    
    window.toggleTheme = toggleTheme;
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
function setupHighQualityModalEvents(overlay, adData, originalAd, apiResult) {
    const amountInput = overlay.querySelector('#amount-input');
    const receiveInput = overlay.querySelector('#receive-input');
    const tradeButton = overlay.querySelector('#trade-button');
    const cancelButton = overlay.querySelector('#cancel-button');
    const maxButton = overlay.querySelector('#max-button');
    const closeButton = overlay.querySelector('.bybit-modal-close');
    // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
    function validateAndToggleButton() {
        const amount = parseFloat(amountInput.value) || 0;
        const minAmount = parseFloat(adData.minAmount) || 0;
        const maxAmount = parseFloat(adData.maxAmount) || 0;
        const balance = parseFloat(adData.availableBalance) || 0;

        const isValid = amount > 0 && 
                    amount >= minAmount && 
                    amount <= maxAmount && 
                    amount <= balance;

        tradeButton.disabled = !isValid;
        tradeButton.style.opacity = isValid ? '1' : '0.6';
        tradeButton.style.cursor = isValid ? 'pointer' : 'not-allowed';
    }

    // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é
    function calculateReceiveAmount() {
        const amount = parseFloat(amountInput.value) || 0;
        const price = parseFloat(adData.price) || 0;
        const receiveAmount = amount * price;
        receiveInput.value = receiveAmount.toFixed(2);
        validateAndToggleButton();
    }

    // === –ü–æ–∫—É–ø–∫–∞ —É –ø—Ä–æ–¥–∞–≤—Ü–∞ ===
    function createBuyPayload(adData, originalAd, apiResult) {
        return {
            itemId: adData.id,
            tokenId: originalAd.tokenId,
            currencyId: originalAd.currencyId,
            side: "0",
            quantity: adData.minQuantity,
            amount: adData.minAmount,
            curPrice: apiResult.result.curPrice,
            flag: "amount",
            version: "1.0",
            securityRiskToken: "",
            isFromAi: false
        };
    }

    // === –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ===
    function createSellPayload(adData, originalAd, apiResult) {
        const paymentIdMap = {
            '75':  '16627518', // –¢–∏–Ω—å–∫–æ—Ñ—Ñ
            '377': '17762813', // –°–±–µ—Ä–±–∞–Ω–∫
            '614': '',         // –ü–°–ë
            '382': '16627221', // SBP
            '383': '19032627', // MIR
            '616': '',         // –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫
            '617': '',         // –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω
            '581': '17201839', // Tinkoff
            '582': '16664034', // Sberbank
            '584': '',         // Sberbank
            '585': '16664050', // Sberbank
            '612': '',         // –£—Ä–∞–ª—Å–∏–±
            '613': ''          // –£—Ä–∞–ª—Å–∏–±
        };

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        const priorityPayments = ['75', '377', '382'];
        
        // –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ adData.payments
        let selectedPayment = adData.payments[0]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π
        let selectedPaymentId = paymentIdMap[selectedPayment] || "";
        
        for (const payment of adData.payments) {
            if (priorityPayments.includes(payment)) {
                selectedPayment = payment;
                selectedPaymentId = paymentIdMap[payment] || "";
                break;
            }
        }

        return {
            itemId: adData.id,
            tokenId: originalAd.tokenId,
            currencyId: originalAd.currencyId,
            side: "1",
            quantity: adData.maxQuantity,
            amount: adData.maxAmount,
            curPrice: apiResult.result.curPrice,
            flag: "amount",
            version: "1.0",
            securityRiskToken: "",
            isFromAi: false,
            paymentType: selectedPayment,
            paymentId: selectedPaymentId,
            online: "0"
        };
    }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        amountInput.addEventListener('input', calculateReceiveAmount);
        amountInput.addEventListener('keyup', calculateReceiveAmount);

        // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ"
        maxButton.addEventListener('click', () => {
            const maxAmount = Math.min(
                parseFloat(adData.maxAmount) || 0,
                parseFloat(adData.availableBalance) || 0
            );
            amountInput.value = maxAmount.toFixed(4);
            calculateReceiveAmount();
        });

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        tradeButton.addEventListener('click', async () => {
            

            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            tradeButton.disabled = true;
            const originalText = tradeButton.textContent;
            tradeButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...';
            tradeButton.style.opacity = '0.6';
            
            try {
                if (apiResult.ret_code == 912100027) {
                    showNotification("The ad status of your P2P order has been changed. Please try another ad.", "error");
                    closeModal()
                    throw new Error("The ad status of your P2P order has been changed. Please try another ad.");
                }
                if (apiResult.ret_code == 912300001) {
                    showNotification("Insufficient ad inventory, please try other ads.", "error");
                    closeModal()
                    throw new Error("Insufficient ad inventory, please try other ads.");
                }
                // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                const orderPayload = originalAd.side == 0 ? createSellPayload(adData, originalAd, apiResult) : createBuyPayload(adData, originalAd, apiResult);

                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞:', orderPayload);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
                const response = await fetch('https://www.bybit.com/x-api/fiat/otc/order/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include', // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    body: JSON.stringify(orderPayload)
                });

                const result = await response.json();
                console.log('–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç:', result);                    

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∏—Å–∫—É
                if (response.ok && result.result && result.result.needSecurityRisk) {
                    let riskToken = result.result.securityRiskToken; // –ò—Å–ø–æ–ª—å–∑—É–µ–º let –≤–º–µ—Å—Ç–æ const


                    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥)
                    const code = prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫—Ç–æ—Ä:"); // –ò–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                    
                    if (!code) {
                        throw new Error("–ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω");
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º verify
                    const verifyRes = await fetch("https://www.bybit.com/x-api/user/public/risk/verify", {
                        method: "POST",
                        headers: { 
                            "content-type": "application/json", 
                            "accept": "application/json" 
                        },
                        credentials: "include",
                        body: JSON.stringify({
                            risk_token: riskToken,
                            component_list: { 
                                google2fa: code // –£–±—Ä–∞–ª JSON.stringify, –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                            }
                        })
                    });
                    
                    const verifyResult = await verifyRes.json();
                    console.log("Verify response:", verifyResult);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if (verifyResult.ret_code === 0 && verifyResult.result) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º riskToken –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        riskToken = verifyResult.result.risk_token;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º riskToken –≤ orderPayload
                        orderPayload.securityRiskToken = riskToken;
                        //google2fa
                        // –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞—ë–º –æ—Ä–¥–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º payload
                        const finalResponse = await fetch("https://www.bybit.com/x-api/fiat/otc/order/create", {
                            method: "POST",
                            headers: { 
                                "content-type": "application/json", 
                                "accept": "application/json" 
                            },
                            credentials: "include",
                            body: JSON.stringify(orderPayload)
                        });
                        
                        const finalResult = await finalResponse.json();
                        console.log("‚úÖ Final create order:", finalResult);
                        
                        if (finalResult.ret_code === 0) {
                            console.log("üéâ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                            showNotification('–æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');
                            closeModal()
                            return finalResult;
                        } else {
                            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:", finalResult.ret_msg);
                            showNotification('The transaction limit has been exceeded', 'error');
                            throw new Error(`Order creation failed: ${finalResult.ret_msg}`);
                            
                        }
                    } else {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", verifyResult.ret_msg);
                        throw new Error(`Verification failed: ${verifyResult.ret_msg}`);
                    }
                    
                } else if (response.ok && result.ret_code === 0) {
                    // –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    console.log("‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:", result);
                    showNotification('–æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');
                    closeModal()
                    return result;
                    
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                    showNotification(result.ret_msg || result, 'error');
                    closeModal()                       
                    throw new Error(`Order creation failed: ${result.ret_msg || 'Unknown error'}`);
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:', error);
                throw error;
            }  finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                tradeButton.disabled = false;
                tradeButton.textContent = originalText;
                tradeButton.style.opacity = '1';
                validateAndToggleButton(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
                }
                    });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        function closeModal() {
            overlay.remove();
            document.body.style.overflow = '';
            enableBodyScroll()
        }

        cancelButton.addEventListener('click', closeModal);
        closeButton.addEventListener('click', closeModal);
        
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
                closeModal();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', function escHandler(e) {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', escHandler);
            }
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.trade-notification');
    existingNotifications.forEach(notif => notif.remove());

    const notification = document.createElement('div');
    notification.className = `trade-notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        z-index: 10001;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        animation: slideIn 0.3s ease-out;
        max-width: 300px;
        word-wrap: break-word;
    `;

    notification.textContent = message;
    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —Ü–µ–Ω—ã
function startPriceTimer() {
    const timerElement = document.querySelector('#price-timer');
    if (!timerElement) return;

    let seconds = 29;
    const interval = setInterval(() => {
        timerElement.textContent = `${seconds}s`;
        seconds--;

        if (seconds < 10) {
            timerElement.style.color = '#ff4757';
        }

        if (seconds < 0) {
            seconds = 29;
            timerElement.style.color = '#81858c';
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
        }
    }, 1000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.removedNodes.forEach((node) => {
                if (node.querySelector && node.querySelector('#price-timer')) {
                    clearInterval(interval);
                    observer.disconnect();
                }
            });
        });
    });

    observer.observe(document.body, { childList: true, subtree: true });
}
function updateGlobalValues(min, max) {
    if(min == MIN_LEFT_VALUE && max == MAX_RIGHT_VALUE) return
    MIN_LEFT_VALUE = min;
    MAX_RIGHT_VALUE = max;
    handleUrlChange()
    console.log(`–ó–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: MIN_LEFT_VALUE = ${MIN_LEFT_VALUE}, MAX_RIGHT_VALUE = ${MAX_RIGHT_VALUE}`);
}

async function fetchAndAppendPage(pageNum) {
    if (isLoading || shouldStopLoading) return;
    isLoading = true;


    let side = "1";
    const currentUrl = window.location.href;
    if (currentUrl.includes("/sell/USDT/RUB")) side = "0";
    else if (currentUrl.includes("/buy/USDT/RUB")) side = "1";

    const payload = {
        userId: USER_ID,
        tokenId: "USDT",
        currencyId: "RUB",
        payment: [],
        side: side,
        size: "10",
        page: String(pageNum),
        amount: "",
        vaMaker: false,
        bulkMaker: false,
        canTrade: true,
        verificationFilter: 0,
        sortType: "OVERALL_RANKING",
        paymentPeriod: [],
        itemRegion: 1
    };

    try {
        const res = await fetch("https://www.bybit.com/x-api/fiat/otc/item/online", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const json = await res.json();
        const ads = json.result || json.data || [];

        const tbody = document.querySelector('.trade-table__tbody');
        if (!tbody) return console.log('Tbody –Ω–µ –Ω–∞–π–¥–µ–Ω');

        let addedCount = 0;

        ads.items.forEach(ad => {
            if (!adShouldBeFiltered(ad)) {
                const newRow = createRowFromTemplate(ad);
                if (newRow) {
                    tbody.appendChild(newRow);
                    addedCount++;
                }
            }
        });

    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ:', e);
    }

    isLoading = false;
}

async function loadAllPagesSequentially() {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
    if (isSequentialLoadingActive) {
        shouldStopLoading = true;
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        while (isLoading) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }

    console.log('–ù–∞—á–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü...');
    
    isSequentialLoadingActive = true;
    shouldStopLoading = false;

    while (currentPage <= MAX_PAGES && !shouldStopLoading) {
        await fetchAndAppendPage(currentPage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (shouldStopLoading) {
            break;
        }
        
        currentPage++;
        if (currentPage <= MAX_PAGES && !shouldStopLoading) {
            await new Promise(resolve => setTimeout(resolve, DELAY_MS));
        }
    }

    isSequentialLoadingActive = false;
    
    if (!shouldStopLoading) {
        console.log('–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
    } else {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã URL.');
    }
}

async function handleUrlChange() {
    const tbody = document.querySelector('.trade-table__tbody');
    if (!tbody) {
        return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if (isSequentialLoadingActive) {
        shouldStopLoading = true;
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        while (isSequentialLoadingActive || isLoading) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tbody.querySelectorAll('.dynamic-row').forEach(row => row.remove());
    tbody.querySelector('.completion-indicator')?.remove();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentUrl = window.location.href;
    if (currentUrl.includes("/sell/USDT/RUB")) {
        currentPage = 16
    } else  currentPage = 1;
    
    shouldStopLoading = false;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    loadAllPagesSequentially();
}

function observeUrlChanges() {
    let previousUrl = location.href;
    const observer = new MutationObserver(() => {
        if (location.href !== previousUrl) {
            console.log(`URL –∏–∑–º–µ–Ω–∏–ª—Å—è: ${previousUrl} ‚Üí ${location.href}`);
            previousUrl = location.href;
            handleUrlChange();
            setTimeout(() => {
                const tableRows = document.querySelectorAll('.trade-table__tbody tr');
                tableRows.forEach(row => {
                    row.classList.add('filtered-ad');
                });
            }, 2000);
        }
    });
    observer.observe(document.body, { childList: true, subtree: true });
}

function waitForTableAndStart() {
    const tbody = document.querySelector('.trade-table__tbody');
    
    if (!tbody || tbody.children.length === 0) {
        console.log('–û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏...');
        setTimeout(waitForTableAndStart, 500);
    } else {
        console.log('–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é –ø–æ–¥–≥—Ä—É–∑–∫—É...');
        tbody.querySelectorAll('.dynamic-row').forEach(row => row.remove());
        tbody.querySelector('.completion-indicator')?.remove();
        setTimeout(() => {
            const tableRows = document.querySelectorAll('.trade-table__tbody tr');
            
            tableRows.forEach(row => {
                row.classList.add('filtered-ad');
            })
            initSliderReplacement({
                min: MIN_LEFT_VALUE,
                max: MAX_RIGHT_VALUE,
                onUpdate: updateGlobalValues
            });
            loadAllPagesSequentially();
            observeUrlChanges();
            document.addEventListener('keydown', (event) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ 'Z' (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                if (event.key === 'z' || event.key === 'Z' || event.key === '—è' || event.key === '–Ø') {
                    handleUrlChange();
                }
            });
        }, 100);
    }
}

setTimeout(waitForTableAndStart, 100);
console.log('Bybit P2P Filter Enhanced –∑–∞–≥—Ä—É–∂–µ–Ω');