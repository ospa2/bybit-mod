import type { OrderPayload } from "../components/buyModal";
import { adShouldBeFiltered } from "../logic/adFilter";
import type { Ad } from "../types/ads";

export interface Card {
   id: string;
   bank: "tbank" | "sber";
   balance: number; // –æ—Å—Ç–∞—Ç–æ–∫
   turnover: number; // –æ–±–æ—Ä–æ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
   date: Date; // –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ—Ç–∞
}

interface CardUsageMap {
   [cardId: string]: number; // timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

const STORAGE_KEY = '!cards_last_used';
const COOLDOWN_TIME = 1_200_000; // 20 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö


// ==== Helpers –¥–ª—è localStorage ====

function isSameDay(date1: Date | string | number, date2: Date | string | number): boolean {
   const d1 = date1 instanceof Date ? date1 : new Date(date1);
   const d2 = date2 instanceof Date ? date2 : new Date(date2);

   return (
      d1.getFullYear() === d2.getFullYear() &&
      d1.getMonth() === d2.getMonth() &&
      d1.getDate() === d2.getDate()
   );
}


export function loadCards(): Card[] {
   const raw = localStorage.getItem("!cards");
   if (!raw) return [];

   try {
      const today = new Date();
      // JSON.parse –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É, –ø–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ
      const cardsFromStorage: any[] = JSON.parse(raw);

      return cardsFromStorage.map((card) => {
         const cardDate = new Date(card.date);

         // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
         if (!isSameDay(cardDate, today)) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±–æ—Ä–æ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞ —Ç–µ–∫—É—â—É—é
            return {
               ...card,
               turnover: 0,
               date: today,
            };
         }

         // –ï—Å–ª–∏ –¥–µ–Ω—å —Ç–æ—Ç –∂–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
         return {
            ...card,
            date: cardDate,
         };
      });
   } catch (e) {
      console.error("Error loading or processing cards:", e);
      return [];
   }
}


// ==== –í–µ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
function priceWeight(price: number, minPrice: number): number {
   if (price <= minPrice) {
      return 1.0;
   } else if (price <= minPrice * 1.005) {
      // –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –æ—Ç 1 –¥–æ 0.5
      return 0.5 + ((1.0 - 0.5) * (1.005 - price / minPrice)) / 0.005;
   } else if (price <= minPrice * 1.01) {
      // –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –æ—Ç 0.5 –¥–æ 0.3
      return 0.3 + ((0.5 - 0.3) * (1.01 - price / minPrice)) / 0.005;
   } else {
      return 0.3;
   }
}

function amountWeight(amount: number): number {
   if (amount <= 10000) return 1.0;
   if (amount <= 20000) return 1.0 + ((1.4 - 1.0) * (amount - 10000)) / 10000;
   if (amount <= 30000) return 1.4 + ((1.7 - 1.4) * (amount - 20000)) / 10000;
   if (amount <= 40000) return 1.7 + ((2.0 - 1.7) * (amount - 30000)) / 10000;
   return 2.0;
}
export function availableBanks(description: string): string[] {
   const lowerDesc = description.toLowerCase();
   type BankVariants = {
      [key: string]: string[];
   };
   const bankVariants: BankVariants = {
      '–¢–∏–Ω—å–∫–æ—Ñ—Ñ': ['—Ç–∏–Ω—å–∫–æ—Ñ—Ñ', '—Ç–∏–Ω—å–∫–æ—Ñ', '—Ç–∏–Ω—å–∫–æ–≤', '—Ç–∏–Ω—å–∫–æ–≤–∞', '—Ç–∏–Ω–∫–∞', '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ–∞', '—Ç-–±–∞–Ω–∫', '—Ç–∏–Ω—å–∫–∏', '—Ç–∏–Ω—å–∫–∞', '—Ç –±–∞–Ω–∫', '—Ç–±–∞–Ω–∫', '—Ç –±–∞–Ω–∫–∞', '—Ç–±–∞–Ω–∫–∞', '—Ç-–±–∞–Ω–∫–∞', 'üü°—Ç-–±–∞–Ω–∫üü°'],
      '–°–±–µ—Ä–±–∞–Ω–∫': ['—Å–±–µ—Ä', '—Å–±–µ—Ä–±–∞–Ω–∫', '—Å–±–µ—Ä–∞', '—Å–±–µ—Ä–±–∞–Ω–∫–∞', '—Å–±–µ—Ä–±–∞–Ω–∫–µ', '—Å–±–µ—Ä—É', 'üü¢—Å–±–µ—Äüü¢'],
      '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫': ['–∞–ª—å—Ñ–∞', '–∞–ª—å—Ñ–∞–±–∞–Ω–∫', '–∞–ª—å—Ñ–∞-–±–∞–Ω–∫', '–∞–ª—å—Ñ–∞ –±–∞–Ω–∫—É', '–∞–ª—å—Ñ—ã', '–∞–ª—å—Ñ–µ', '–∞–ª—å—Ñ–∞-–±–∞–Ω–∫–∞'],
      '–í–¢–ë': ['–≤—Ç–±', '–≤—Ç–±24', '–≤—Ç–± –±–∞–Ω–∫–∞', '–≤—Ç–±—à–∫–∏'],
      '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫': ['–≥–∞–∑–ø—Ä–æ–º', '–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫', '–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞', '–≥–∞–∑–ø—Ä–æ–º–∞'],
      '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫': ['—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', '—Ä–∞–π—Ñ', '—Ä–∞–π—Ñ–∞', '—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫', '—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫–∞'],
      '–†–æ—Å–±–∞–Ω–∫': ['—Ä–æ—Å–±–∞–Ω–∫', '—Ä–æ—Å–±–∞–Ω–∫–∞'],
      '–û—Ç–∫—Ä—ã—Ç–∏–µ': ['–æ—Ç–∫—Ä—ã—Ç–∏–µ', '–æ—Ç–∫—Ä—ã—Ç–∏—è', '–æ—Ç–∫—Ä—ã—Ç–∏–µ–º', '–±–∞–Ω–∫ –æ—Ç–∫—Ä—ã—Ç–∏–µ'],
      '–ú–ö–ë': ['–º–∫–±', '–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π', '–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–Ω–∫', '–º–∫–±—à–∫–∏'],
      '–°–æ–≤–∫–æ–º–±–∞–Ω–∫': ['—Å–æ–≤–∫–æ–º', '—Å–æ–≤–∫–æ–º–±–∞–Ω–∫', '—Å–æ–≤–∫–æ–º–±–∞–Ω–∫–∞'],
      '–ü–æ—á—Ç–∞ –ë–∞–Ω–∫': ['–ø–æ—á—Ç–∞ –±–∞–Ω–∫', '–ø–æ—á—Ç–∞ –±–∞–Ω–∫–∞'],
      '–ê–∫ –ë–∞—Ä—Å': ['–∞–∫ –±–∞—Ä—Å', '–∞–∫–±–∞—Ä—Å', '–∞–∫ –±–∞—Ä—Å–∞', '–∞–∫–±–∞—Ä—Å–∞', '–∞–∫ –±–∞—Ä—Å–µ'],
      '–£—Ä–∞–ª–°–∏–±': ['—É—Ä–∞–ª—Å–∏–±', '—É—Ä–∞–ª —Å–∏–±', '—É—Ä–∞–ª—Å–∏–±–∞'],
      '–ü—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫': ['–ø—Ä–æ–º—Å–≤—è–∑—å', '–ø—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫', '–ø—Å–±', '–ø—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫–∞'],
      '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫': ['—Ä–æ—Å—Å–µ–ª—å—Ö–æ–∑', '—Ä—Å—Ö–±', '—Ä–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫', '—Ä–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫–∞'],
      '–û–∑–æ–Ω': ['–æ–∑–æ–Ω', '–æ–∑–æ–Ω–∞', '–æ–∑–æ–Ω–µ', '–æ–∑–æ–Ω–æ–º', '–æ–∑–æ–Ω –±–∞–Ω–∫'],
   };

   const allBanks = Object.keys(bankVariants);

   // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
   const findBanksInText = (text: string): Set<string> => {
      const found = new Set<string>();
      allBanks.forEach(bank => {
         const variants = bankVariants[bank] || [];
         if (variants.some((variant: string) => text.includes(variant))) {
            found.add(bank);
         }
      });
      return found;
   };

   // –§–∏–ª—å—Ç—Ä –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   const isIrrelevantContext = (text: string): boolean => {
      return /–±—Ä–∞—É–∑–µ—Ä|–≤–µ–±|–≤–µ—Ä—Å–∏|–º–æ–±–∏–ª—å–Ω|–ø—Ä–∏–ª–æ–∂–µ–Ω|ios|android|\d+%|–ø—Ä–æ—Ü–µ–Ω—Ç|–ª–∏—Ü|—Ñ–∏–∑–ª–∏—Ü|–∏–ø/i.test(text);
   };

   // --- –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è ---
   const excludedBanks = new Set<string>();

   const exclusionPatterns = [
      // "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é/–ø—Ä–∏–Ω–∏–º–∞–µ–º/–ø—Ä–∏–Ω–∏–º–∞—é—Ç —Å/—Å–æ/–æ—Ç/–∏–∑ X"
      /–Ω–µ\s+–ø—Ä–∏–Ω–∏–º–∞(—é|–µ–º|–µ—Ç|—é—Ç)\s+(?:–ø–ª–∞—Ç–µ–∂|–ø–ª–∞—Ç—ë–∂|–ø–µ—Ä–µ–≤–æ–¥|–æ–ø–ª–∞—Ç—É)?\s*(?:—Å–æ?|—Å|–æ—Ç|–∏–∑)\s+([^.,!?]+)/gi,
      /–Ω–µ\s+–ø—Ä–∏–º—É\s+(?:–ø–ª–∞—Ç–µ–∂|–ø–ª–∞—Ç—ë–∂|–ø–µ—Ä–µ–≤–æ–¥|–æ–ø–ª–∞—Ç—É)?\s*(?:—Å–æ?|—Å|–æ—Ç|–∏–∑)\s+([^.,!?]+)/gi,
      // "–Ω–µ —Ä–∞–±–æ—Ç–∞—é/—Ä–∞–±–æ—Ç–∞–µ–º/—Ä–∞–±–æ—Ç–∞—é—Ç —Å/–æ—Ç X"
      /–Ω–µ\s+—Ä–∞–±–æ—Ç–∞(—é|–µ–º|–µ—Ç|—é—Ç)\s+(?:—Å–æ?|—Å|–æ—Ç)\s+([^.,!?]+)/gi,
      // "–∫—Ä–æ–º–µ X"
      /–∫—Ä–æ–º–µ\s+([^.,!?]+)/gi,
      // "–∏—Å–∫–ª—é—á–∞—è/–∏—Å–∫–ª—é—á–∞—é X"
      /–∏—Å–∫–ª—é—á[–∞—è–µ][—é—è]\s+([^.,!?]+)/gi,
      // "—Å/–æ—Ç X –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é/–ø—Ä–∏–º—É"
      /(?:—Å–æ?|—Å|–æ—Ç|–∏–∑)\s+([^.,!?]+?)\s+–Ω–µ\s+(?:–ø—Ä–∏–Ω–∏–º–∞(—é|–µ–º|–µ—Ç|—é—Ç)|–ø—Ä–∏–º—É|—Ä–∞–±–æ—Ç–∞(—é|–µ–º|–µ—Ç|—é—Ç))/gi,
   ];

   exclusionPatterns.forEach(pattern => {
      const matches = [...lowerDesc.matchAll(pattern)];
      matches.forEach(match => {
         const exclusionText = match[1].trim();
         if (isIrrelevantContext(exclusionText)) return;

         // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ "–∏", ",", —Ç–æ—á–∫–∞–º —Å –Ω–æ–º–µ—Ä–∞–º–∏
         const parts = exclusionText.split(/\s+–∏\s+|,\s*|\d+\.\s*/);
         parts.forEach(part => {
            const cleanPart = part.trim();
            if (cleanPart.length > 1) {
               const banksInPart = findBanksInText(cleanPart);
               banksInPart.forEach(bank => excludedBanks.add(bank));
            }
         });
      });
   });
   
   // --- –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "—Å X –Ω–∞ Y" ---
   let normalized = lowerDesc.replace(/\s+/g, ' ').trim();

   // –£–±–∏—Ä–∞–µ–º —à—É–º–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
   const fillers = /\b(–ø–æ\s+–Ω–æ–º–µ—Ä—É\s+–∫–∞—Ä—Ç—ã|–ø–æ\s+–∫–∞—Ä—Ç–µ|–ø–æ\s+–Ω–æ–º–µ—Ä[–∞—É]?|—á–µ—Ä–µ–∑|–ø–æ\s+—Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º|—Å\s+–∫–∞—Ä—Ç—ã\s+—á–µ—Ä–µ–∑|—Å—Ç—Ä–æ–≥–æ|—Ç–æ–ª—å–∫–æ)\b/gi;
   normalized = normalized.replace(fillers, ' ').replace(/\s+/g, ' ');

   const pairPattern = /(?:\b—Å\b|\b—Å–æ\b|\b–æ—Ç\b|\b–∏–∑\b)\s+([–∞-—è—ë0-9\-\s]+?)\s+(?:–Ω–∞|–≤)\s+[–∞-—è—ë0-9\-\s]+?(?=[.,!?]|$)/gi;
   const pairMatches = [...normalized.matchAll(pairPattern)];

   const pairSenders = new Set<string>();
   if (pairMatches.length > 0) {
      for (const match of pairMatches) {
         const senderText = (match[1] || '').trim();
         if (isIrrelevantContext(senderText)) continue;

         const banksInSender = findBanksInText(senderText);
         banksInSender.forEach(bank => pairSenders.add(bank));
      }
   }

   // --- –®–∞–≥ 3: –ò—â–µ–º —è–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ("–ø—Ä–∏–º—É —Å", "–ø—Ä–∏–Ω–∏–º–∞—é —Å") ---
   const allowedBanks = new Set<string>();
   const allowPatterns = [
      /(?:–ø—Ä–∏–º—É|–ø—Ä–∏–Ω–∏–º–∞(—é|–µ–º|–µ—Ç|—é—Ç)|—Ä–∞–±–æ—Ç–∞(—é|–µ–º|–µ—Ç|—é—Ç))\s+(?:—Ç–æ–ª—å–∫–æ\s+)?(?:—Å–æ?|—Å|–æ—Ç)\s+([^.,!?]+)/gi,
      /(?:—Ç–∞–∫–∂–µ|–µ—â—ë|–µ—â–µ)\s+(?:–ø—Ä–∏–º—É|–ø—Ä–∏–Ω–∏–º–∞(—é|–µ–º|–µ—Ç|—é—Ç))\s+(?:—Å–æ?|—Å|–æ—Ç)\s+([^.,!?]+)/gi,
   ];

   allowPatterns.forEach(pattern => {
      const matches = [...lowerDesc.matchAll(pattern)];
      matches.forEach(match => {
         const allowText = match[1].trim();
         if (isIrrelevantContext(allowText)) return;

         // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
         const parts = allowText.split(/\s+–∏\s+|,\s*|\d+\.\s*/);
         parts.forEach(part => {
            const cleanPart = part.trim();
            if (cleanPart.length > 1) {
               const banksInPart = findBanksInText(cleanPart);
               banksInPart.forEach(bank => allowedBanks.add(bank));
            }
         });
      });
   });

   // --- –®–∞–≥ 4: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
   let result = new Set<string>();

   // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "—Å X –Ω–∞ Y", –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
   if (pairSenders.size > 0) {
      pairSenders.forEach(bank => result.add(bank));
   }

   // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–∞–Ω–∫–∏
   if (allowedBanks.size > 0) {
      allowedBanks.forEach(bank => result.add(bank));
   }

   // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –∏—â–µ–º –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –±–∞–Ω–∫–∏ (fallback)
   if (result.size === 0) {
      const mentioned = findBanksInText(lowerDesc);
      mentioned.forEach(bank => result.add(bank));
   }

   // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
   excludedBanks.forEach(bank => result.delete(bank));

   // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   const finalResult = Array.from(result);
   return finalResult.length > 0 ? finalResult : ['*'];
}



function paymentWeight(ad: Ad, card: Card): number {
   const banks = availableBanks(ad.remark)
   const isSberAd = (banks.includes("–°–±–µ—Ä–±–∞–Ω–∫") || banks.includes("*"));
   const cardsTbankBalances = loadCards().filter((c) => c.bank === "tbank").map((c) => c.balance);
   const cardsSberBalances = loadCards()
      .filter((c) => c.bank === "sber")
      .map((c) => c.balance);
   //–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Ç–±–∞–Ω–∫–æ–≤ –æ–ø—É—Å—Ç–æ—à–µ–Ω, –∞ —Å–±–µ—Ä–æ–≤ - –Ω–µ—Ç
   if (
      cardsTbankBalances.every((balance) => balance <= 20000) &&
      cardsSberBalances.some((balance) => balance >= 20000) &&
      card.bank === "sber" &&
      isSberAd
   ) {
      return 12.0;
   }

   if (card.bank === "sber" && isSberAd) return 1.0;
   if (card.bank === "tbank" && !isSberAd) return 0.8;

   return 0; // –∫–∞—Ä—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
}

function getCardUsageData(): CardUsageMap {
   try {
      const data = localStorage.getItem(STORAGE_KEY);
      return data ? JSON.parse(data) : {};
   } catch (e) {
      console.error('Error reading card usage data:', e);
      return {};
   }
}

function setCardUsageData(data: CardUsageMap): void {
   try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
   } catch (e) {
      console.error('Error saving card usage data:', e);
   }
}

function canUseCard(card: Card, ad: Ad | OrderPayload): boolean {
   let amount: number;

   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   const usageData = getCardUsageData();
   const lastUsedTime = usageData[card.id];

   if (lastUsedTime) {
      const timeDiff = Date.now() - lastUsedTime;
      if (timeDiff < COOLDOWN_TIME) {
         
         return false;
      }
   }
   if ("maxAmount" in ad) {
      //–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É

      amount = parseFloat(ad.maxAmount);
      if (isNaN(amount)) return false;

      if (card.balance - amount < 10_000) return false;
      if (card.turnover + amount > 100_000) return false;

      return paymentWeight(ad, card) > 0;
   } else {
      //–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É

      amount = parseFloat(ad.amount);
      if (isNaN(amount)) return false;

      if (card.turnover + amount > 100_000) return false;
   }

   return true;
}

export function markCardAsUsed(cardId: string): void {
   const usageData = getCardUsageData();
   const now = Date.now();
   localStorage.setItem("tradingModalCooldown", now.toString());// –æ–±—â–µ–µ –∫–¥ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å—Å—è
   usageData[cardId] = Date.now();
   setCardUsageData(usageData);
}


// ======== –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ========

export function findSellCard(ad: OrderPayload): Card | null {
   // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
   let cards = loadCards();

   // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—Ç—ã
   const available = cards.filter((c) => canUseCard(c, ad));

   if (!available.length) return null;

   // –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ —Ç–∏–Ω—å–∫–∏, —Ç–æ –æ–Ω–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
   available.sort((a, b) => {
      const priority = (bank: string) =>
         bank.toLowerCase().includes("tbank")
            ? 1
            : bank.toLowerCase().includes("sber")
               ? 2
               : 3;
      return priority(a.bank) - priority(b.bank);
   });

   let bestCard = available[0];

   markCardAsUsed(bestCard.id);

   // –û–±–Ω–æ–≤–ª—è–µ–º cards_v1 (—Å–±—Ä–æ—Å turnover –ø—Ä–∏ –Ω–æ–≤–æ–º –¥–Ω–µ)
   localStorage.setItem("!cards", JSON.stringify(cards));

   return bestCard;
}

// ==== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====
function calculateValue(ad: Ad, card: Card, minPrice: number): number {
   const price = parseFloat(ad.price);
   const amount = parseFloat(ad.maxAmount);

   const wPrice = priceWeight(price, minPrice);
   const wAmount = amountWeight(amount);
   const wPayment = paymentWeight(ad, card);


   // –≤–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
   const priceCoef = 0.6;
   const paymentCoef = 0.25;
   const amountCoef = 0.15;
   // console.log(
   //    wPrice * priceCoef + wPayment * paymentCoef + wAmount * amountCoef
   // );

   return wPrice * priceCoef + wPayment * paymentCoef + wAmount * amountCoef;
}

// ======== –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ========
export function findBuyCard(ad: Ad, minPrice: number): Card | null {
   const cards = loadCards();
   if (!cards.length) return null;

   let best: { card: Card; value: number } | null = null;

   for (const card of cards) {
      if (!canUseCard(card, ad)) continue;

      const value = calculateValue(ad, card, minPrice);
      if (value <= 0) continue;

      if (!best || value > best.value) {
         best = { card, value };
      }
   }
   return best ? best.card : null;
}

// ==== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====
export function findBestBuyAd(ads: Ad[]): { ad: Ad; card: Card } | null {
   ads = ads.filter((a) => !adShouldBeFiltered(a));
   if (!ads.length) return null;

   const minPrice = Math.min(...ads.map((a) => parseFloat(a.price)));
   let best: { ad: Ad; card: Card; value: number } | null = null;

   for (const ad of ads) {
      const card = findBuyCard(ad, minPrice);
      if (!card) continue;

      const value = calculateValue(ad, card, minPrice);

      if (!best || value > best.value) {
         best = { ad, card, value };
      }
   }
   const COOLDOWN_MS = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç


   const lastTime = Number(
      localStorage.getItem("tradingModalCooldown") || "0"
   );
   const now = Date.now();

   if ((now - lastTime >= COOLDOWN_MS) && best) {

      return { ad: best.ad, card: best.card };

   } else {
      const remainingMs = COOLDOWN_MS - (now - lastTime);
      const minutes = Math.floor(remainingMs / 1000 / 60);
      const seconds = Math.floor((remainingMs / 1000) % 60);

      console.log(
         `–ö–î –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ (–æ—Å—Ç–∞–ª–æ—Å—å ${minutes} –º–∏–Ω ${seconds} —Å–µ–∫)`
      );
      return null;
   }
}