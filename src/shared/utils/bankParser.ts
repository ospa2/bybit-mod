type BankVariants = {
   [key: string]: string[];
};
const bankVariants: BankVariants = {
   –¢–∏–Ω—å–∫–æ—Ñ—Ñ: [
      "—Ç–∏–Ω—å–∫–æ—Ñ—Ñ",
      "—Ç–∏–Ω—å–∫–æ—Ñ",
      "—Ç–∏–Ω—å–∫–æ–≤",
      "—Ç–∏–Ω—å–∫–æ–≤–∞",
      "—Ç–∏–Ω–∫–∞",
      "—Ç–∏–Ω—å–∫–æ—Ñ—Ñ–∞",
      "—Ç-–±–∞–Ω–∫",
      "—Ç–∏–Ω—å–∫–∏",
      "—Ç–∏–Ω—å–∫–∞",
      "—Ç –±–∞–Ω–∫",
      "—Ç–∏–Ω—å–∫",
      "—Ç–±–∞–Ω–∫",
      "—Ç –±–∞–Ω–∫–∞",
      "—Ç–±–∞–Ω–∫–∞",
      "—Ç-–±–∞–Ω–∫–∞",
      "—Ç.–±–∞–Ω–∫–∞",
      "—Ç.–±–∞–Ω–∫",
      "üü°—Ç-–±–∞–Ω–∫üü°",
   ],
   –°–±–µ—Ä–±–∞–Ω–∫: [
      "—Å–±–µ—Ä",
      "—Å–±–µ—Ä–±–∞–Ω–∫",
      "—Å–±–µ—Ä–∞",
      "—Å–±–µ—Ä–±–∞–Ω–∫–∞",
      "—Å–±–µ—Ä–±–∞–Ω–∫–µ",
      "—Å–±–µ—Ä—É",
      "c–±–µ—Ä",
      "C–ë–ï–†",
      "C–ëE–†"
   ],
   "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫": [
      "–∞–ª—å—Ñ–∞",
      "–∞–ª—å—Ñ–∞–±–∞–Ω–∫",
      "–∞–ª—å—Ñ–∞-–±–∞–Ω–∫",
      "–∞–ª—å—Ñ–∞ –±–∞–Ω–∫—É",
      "–∞–ª—å—Ñ—ã",
      "–∞–ª—å—Ñ–µ",
      "–∞–ª—å—Ñ–∞-–±–∞–Ω–∫–∞",
   ],
   –í–¢–ë: ["–≤—Ç–±", "–≤—Ç–±24", "–≤—Ç–± –±–∞–Ω–∫–∞", "–≤—Ç–±—à–∫–∏"],
   –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫: ["–≥–∞–∑–ø—Ä–æ–º", "–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞", "–≥–∞–∑–ø—Ä–æ–º–∞"],
   –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫: [
      "—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω",
      "—Ä–∞–π—Ñ",
      "—Ä–∞–π—Ñ–∞",
      "—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫",
      "—Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫–∞",
   ],
   –†–æ—Å–±–∞–Ω–∫: ["—Ä–æ—Å–±–∞–Ω–∫", "—Ä–æ—Å–±–∞–Ω–∫–∞"],
   –û—Ç–∫—Ä—ã—Ç–∏–µ: ["–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–∏—è", "–æ—Ç–∫—Ä—ã—Ç–∏–µ–º", "–±–∞–Ω–∫ –æ—Ç–∫—Ä—ã—Ç–∏–µ"],
   –ú–ö–ë: ["–º–∫–±", "–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π", "–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–Ω–∫", "–º–∫–±—à–∫–∏"],
   –°–æ–≤–∫–æ–º–±–∞–Ω–∫: ["—Å–æ–≤–∫–æ–º", "—Å–æ–≤–∫–æ–º–±–∞–Ω–∫", "—Å–æ–≤–∫–æ–º–±–∞–Ω–∫–∞"],
   "–ü–æ—á—Ç–∞ –ë–∞–Ω–∫": ["–ø–æ—á—Ç–∞ –±–∞–Ω–∫", "–ø–æ—á—Ç–∞ –±–∞–Ω–∫–∞"],
   "–ê–∫ –ë–∞—Ä—Å": ["–∞–∫ –±–∞—Ä—Å", "–∞–∫–±–∞—Ä—Å", "–∞–∫ –±–∞—Ä—Å–∞", "–∞–∫–±–∞—Ä—Å–∞", "–∞–∫ –±–∞—Ä—Å–µ"],
   –£—Ä–∞–ª–°–∏–±: ["—É—Ä–∞–ª—Å–∏–±", "—É—Ä–∞–ª —Å–∏–±", "—É—Ä–∞–ª—Å–∏–±–∞"],
   –ü—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫: ["–ø—Ä–æ–º—Å–≤—è–∑—å", "–ø—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫", "–ø—Å–±", "–ø—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫–∞", "–ø—Ä–æ–º —Å–≤—è–∑—å –±–∞–Ω–∫–∞", "–ø—Ä–æ–º —Å–≤—è–∑—å –±–∞–Ω–∫"],
   –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫: ["—Ä–æ—Å—Å–µ–ª—å—Ö–æ–∑", "—Ä—Å—Ö–±", "—Ä–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫", "—Ä–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫–∞"],
   –û–∑–æ–Ω: ["–æ–∑–æ–Ω", "–æ–∑–æ–Ω–∞", "–æ–∑–æ–Ω–µ", "–æ–∑–æ–Ω–æ–º", "–æ–∑–æ–Ω –±–∞–Ω–∫"],
};

// –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –≥–¥–µ –±–∞–Ω–∫–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏
function removeRecipientBanks(text: string): string {
   let result = text;

   // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π "–≥—Ä–∞–Ω–∏—Ü–∞ —Ñ—Ä–∞–∑—ã"
   const boundary =
      "(?=[\\s.,!?;:()\\[\\]{}¬´¬ª\"'\\/|\\\\‚Äì‚Äî]|\\s+(?:–∏|—Ç–∞–∫–∂–µ|–µ—â—ë|–µ—â–µ|–ø—Ä–∏–º—É|–ø—Ä–∏–Ω–∏–º–∞—é)|\\s*$)";

   const recipientPatterns = [
      // "–Ω–∞/–≤" —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
      new RegExp(
         `\\s+(?:–Ω–∞|–≤)(?:\\s+(?:–Ω–∞|–≤))*\\s+[–∞-—è—ë0-9\\-\\s]+?${boundary}`,
         "gimu"
      ),

      // "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞/–≤"
      new RegExp(
         `–ø–µ—Ä–µ–≤–æ–¥(?:—ã)?\\s+(?:–Ω–∞|–≤)(?:\\s+(?:–Ω–∞|–≤))*\\s+[–∞-—è—ë0-9\\-\\s]+?${boundary}`,
         "gimu"
      ),

      // "–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞/–≤"
      new RegExp(
         `–∑–∞—á–∏—Å–ª–µ–Ω–∏[–µ—è]\\s+(?:–Ω–∞|–≤)(?:\\s+(?:–Ω–∞|–≤))*\\s+[–∞-—è—ë0-9\\-\\s]+?${boundary}`,
         "gimu"
      ),
   ];

   for (const pattern of recipientPatterns) {
      result = result.replace(pattern, " ");
   }

   return result.replace(/\s+/g, " ").trim();
}

function removeExcludedBanks(text: string): string {
   let result = text;

   // –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –°–ü–ò–°–ö–ò (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ) –ø–æ—Å–ª–µ —Å–ª–æ–≤-–º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–ø—Ä–µ—Ç–∞
   const listPatterns = [
      // "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é: 1. —Ç–∏–Ω—å–∫–æ—Ñ—Ñ 2. —Å–±–µ—Ä 3. –∞–ª—å—Ñ–∞" - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      /–Ω–µ\s+–ø—Ä–∏–Ω–∏–º–∞[—é–µ][—Ç–º]?\s+(?:—Å|—Å–æ)?\s*:?\s*(?:\d+\s*[.)]\s*[–∞-—è—ë0-9\-\s]+?)+?(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ –ø—Ä–∏–º—É: 1. —Ç–∏–Ω—å–∫–æ—Ñ—Ñ 2. —Å–±–µ—Ä" - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      /–Ω–µ\s+–ø—Ä–∏–º[—É–µ]\s+(?:—Å|—Å–æ)?\s*:?\s*(?:\d+\s*[.)]\s*[–∞-—è—ë0-9\-\s]+?)+?(?=[.,;!?\n]|$)/gi,

      // "–∫—Ä–æ–º–µ: 1. —Ç–∏–Ω—å–∫–æ—Ñ—Ñ 2. —Å–±–µ—Ä" - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      /–∫—Ä–æ–º–µ\s*:?\s*(?:\d+\s*[.)]\s*[–∞-—è—ë0-9\-\s]+?)+?(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é: —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä, –∞–ª—å—Ñ–∞" –∏–ª–∏ "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é —Å —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä"
      /–Ω–µ\s+–ø—Ä–∏–Ω–∏–º–∞[—é–µ][—Ç–º]?\s+(?:—Å|—Å–æ)?\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:,\s*[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é —Ç–∏–Ω—å–∫–æ—Ñ—Ñ –∏ —Å–±–µ—Ä"
      /–Ω–µ\s+–ø—Ä–∏–Ω–∏–º–∞[—é–µ][—Ç–º]?\s+(?:—Å|—Å–æ)?\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:\s+–∏\s+[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ –ø—Ä–∏–º—É: —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä" –∏–ª–∏ "–Ω–µ –ø—Ä–∏–º—É —Å: —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä"
      /–Ω–µ\s+–ø—Ä–∏–º[—É–µ]\s+(?:—Å|—Å–æ)?\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:,\s*[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ –ø—Ä–∏–º—É —Ç–∏–Ω—å–∫–æ—Ñ—Ñ –∏ —Å–±–µ—Ä"
      /–Ω–µ\s+–ø—Ä–∏–º[—É–µ]\s+(?:—Å|—Å–æ)?\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:\s+–∏\s+[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–∫—Ä–æ–º–µ: —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä, –∞–ª—å—Ñ–∞"
      /–∫—Ä–æ–º–µ\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:,\s*[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–∫—Ä–æ–º–µ —Ç–∏–Ω—å–∫–æ—Ñ—Ñ –∏ —Å–±–µ—Ä"
      /–∫—Ä–æ–º–µ\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:\s+–∏\s+[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–±–µ–∑: —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–±–µ–∑ —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä"
      /–±–µ–∑\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:,\s*[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–±–µ–∑ —Ç–∏–Ω—å–∫–æ—Ñ—Ñ –∏ —Å–±–µ—Ä"
      /–±–µ–∑\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:\s+–∏\s+[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–∏—Å–∫–ª—é—á–∞—è: —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, —Å–±–µ—Ä"
      /(?:–∏—Å–∫–ª—é—á–∞[—è—é]|–∑–∞\s+–∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º)\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:,\s*[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,

      // "–∏—Å–∫–ª—é—á–∞—è —Ç–∏–Ω—å–∫–æ—Ñ—Ñ –∏ —Å–±–µ—Ä"
      /(?:–∏—Å–∫–ª—é—á–∞[—è—é]|–∑–∞\s+–∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º)\s*:?\s*[–∞-—è—ë0-9\-\s]+(?:\s+–∏\s+[–∞-—è—ë0-9\-\s]+)+(?=[.,;!?\n]|$)/gi,
   ];

   listPatterns.forEach((pattern) => {
      result = result.replace(pattern, " ");
   });
   // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç—ã (–Ω–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–æ–≤)
   // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–ø—Ä–µ—Ç–æ–≤
   const singleExcludePatterns = [
      // "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é —Å/—Å–æ –ë–ê–ù–ö"
      /–Ω–µ\s+–ø—Ä–∏–Ω–∏–º–∞[—é–µ][—Ç–º]?\s+(?:—Å|—Å–æ)\s+[^.,;!?\n]+?(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ –ø—Ä–∏–º—É —Å/—Å–æ –ë–ê–ù–ö"
      /–Ω–µ\s+–ø—Ä–∏–º[—É–µ]\s+(?:—Å|—Å–æ)\s+[^.,;!?\n]+?(?=[.,;!?\n]|$)/gi,

      // "–∫—Ä–æ–º–µ –ë–ê–ù–ö"
      /–∫—Ä–æ–º–µ\s+[^.,;!?\n]+?(?=[.,;!?\n]|$)/gi,

      // "–Ω–µ —Å/—Å–æ –ë–ê–ù–ö"
      /–Ω–µ\s+(?:—Å|—Å–æ)\s+[^.,;!?\n]+?(?=[.,;!?\n]|$)/gi,

      // "—Å –ë–ê–ù–ö –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é/–Ω–µ –∑–∞—Ö–æ–¥–∏—Ç"
      /(?:—Å|—Å–æ)\s+[^.,;!?\n]+?\s+–Ω–µ\s+(?:–ø—Ä–∏–Ω–∏–º–∞[—é–µ][—Ç–º]?|–ø—Ä–∏–º[—É–µ]|–∑–∞—Ö–æ–¥[–∏—é][—Ç–º]?)/gi,

      // "–ë–ê–ù–ö –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é" (–≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏)
      /(?:^|[.!?,;]\s+)[–∞-—è—ë0-9\-\s]+?\s+–Ω–µ\s+(?:–ø—Ä–∏–Ω–∏–º–∞[—é–µ][—Ç–º]?|–ø—Ä–∏–º[—É–µ])/gi,

      // "–∏—Å–∫–ª—é—á–∞—è –ë–ê–ù–ö", "–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ë–ê–ù–ö"
      /(?:–∏—Å–∫–ª—é—á–∞[—è—é]|–∑–∞\s+–∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º)\s+[^.,;!?\n]+?(?=[.,;!?\n]|$)/gi,
   ];

   singleExcludePatterns.forEach((pattern) => {
      result = result.replace(pattern, " ");
   });

   // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
   result = result.replace(/\s+/g, " ").trim();

   return result;
}

// –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –±–∞–Ω–∫–∏ –≤ –æ—á–∏—â–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
function findAllMentionedBanks(text: string): string[] {
   const lowerText = text.toLowerCase();
   const found = new Set<string>();

   for (const [bankName, variants] of Object.entries(bankVariants)) {
      for (const variant of variants) {
         if (lowerText.includes(variant)) {
            found.add(bankName);
            break;
         }
      }
   }

   return Array.from(found);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –Ω–æ–≤—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
export function availableBanks(description: string): string[] {
   // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
   let cleanText = description
      .replace(/[\p{Extended_Pictographic}]/gu, ".")
      .replace(/[\[\]{}()!.üèª]/g, ".")
      .replace(/\s+/g, " ")
      .trim()
      .toLowerCase();
   // –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏
   cleanText = removeExcludedBanks(cleanText);
   // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –≥–¥–µ –±–∞–Ω–∫–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏
   cleanText = removeRecipientBanks(cleanText);
   // –®–∞–≥ 3: –ò—â–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤
   const result = findAllMentionedBanks(cleanText);
   // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º wildcard
   return result.length > 0 ? result : ["*"];
}