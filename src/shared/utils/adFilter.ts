//src/logic/adFilter.ts 

import { forbiddenPhrases, MIN_EXECUTED_COUNT, MAX_PRICE_DIFFERENCE } from '../../core/config.ts';
import { appState } from '../../core/state.ts';
import type { Ad } from '../types/ads';
import type { ReviewStats } from '../types/reviews';

export function adShouldBeFiltered(ad: Ad) {
  // 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  if (ad.finishNum <= MIN_EXECUTED_COUNT) {

    return true;
  }

  // let storedStats: ReviewStats[] = []; // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∂–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è —Å–Ω–æ–≤–∞
  let storedStats: ReviewStats[] = [];
  try {
    const storedStatsRaw = localStorage.getItem("reviewsStatistics_v1");
    storedStats = storedStatsRaw ? JSON.parse(storedStatsRaw) : [];
    const userStats = storedStats.find((item) => item.userId === ad.userId);
    const goodReviewsCount = userStats?.goodReviewsCount ?? 0;

    // 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã ad.side === 0 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
    if (ad.side === 0 && goodReviewsCount < 100) {

      return true;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    if (!Array.isArray(storedStats)) storedStats = [];
  } catch (err) {

    storedStats = []; // –°–±—Ä–æ—Å –≤ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }

  const userStats = storedStats.find(item => item.userId === ad.userId);

  // 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö (highlighted) –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  if (userStats && userStats.highlightedCount >= 3) {

    return true;
  }

  const min = parseFloat(ad.minAmount);
  const max = parseFloat(ad.maxAmount);
  const diff = max - min;

  // 4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –µ—Å–ª–∏ min/maxAmount –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
  if (isNaN(min) || isNaN(max)) {

    return true;
  }

  // 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ –≤ —Ü–µ–Ω–µ
  if (diff > MAX_PRICE_DIFFERENCE) {

    return true;
  }

  // 6. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  // üöÄ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–æ–±—â–µ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  if (max < appState.MIN_LEFT_VALUE || min > appState.MAX_RIGHT_VALUE) {

    return true;
  }

  // 7. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏ (remark)
  if (ad.remark && typeof ad.remark === 'string') {
    const remark = ad.remark.toLowerCase();
    for (const phrase of forbiddenPhrases) {
      if (remark.includes(phrase)) {

        return true;
      }
    }
  }

  // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  return false;
}
