// src/services/fetchInterceptor.ts

import { enhanceAdRows } from "../logic/sellAdProc";
import { handleModalOpening } from "../logic/sellModal";
import { sendSellData } from "./bybitApi";
import { getRowIndex } from "../utils/domHelpers";
import type { Ad, CreateResponse } from "../types/ads";
import reviewsStatistics, { processUserReviews } from "../components/review";
import type { Order, OrderPayload } from "../components/buyModal";
import { loadCards, type Card } from "../automation/adFinder";
import { GM_xmlhttpRequest } from "$";

let currentButtonClickHandler: ((e: MouseEvent) => void) | null = null;
let onlineAdsData: Ad[] = []; // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
function delay(ms: number) {
   return new Promise((resolve) => setTimeout(resolve, ms));
}

let isBackgroundProcessRunning = false;

export async function backgroundProcessAds() {

   const newSellersAdsRaw = localStorage.getItem("unknownUserIds") || "[]";//–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
   const ads: Ad[] = JSON.parse(newSellersAdsRaw);
   if (isBackgroundProcessRunning) {
      console.log(
         "‚ö† backgroundProcessAds —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω"
      );
      return;
   }
   isBackgroundProcessRunning = true;
   console.log("‚ñ∂ –ó–∞–ø—É—â–µ–Ω backgroundProcessAds");

   try {
      const oldMerchantsAds = ads.filter(
         (ad) => reviewsStatistics.getByUserId(ad.userId) !== null
      );
      for (const ad of ads) {
         await processUserReviews(ad);
         const newValue = localStorage.getItem("unknownUserIds") || "[]";
         const newSellerAds: Ad[] = JSON.parse(newValue);


         const nextSellerAds = newSellerAds.filter((item: Ad) => item.userId !== ad.userId);

         localStorage.setItem("unknownUserIds", JSON.stringify(nextSellerAds));
         await delay(1000); // –ø–∞—É–∑–∞ 1 —Å–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ IP
      }
      for (const ad of oldMerchantsAds) {
         await processUserReviews(ad);

         await delay(1000); // –ø–∞—É–∑–∞ 1 —Å–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ IP
      }
   } finally {
      isBackgroundProcessRunning = false;
   }
}

type OrderStatus = "pending" | "completed" | "cancelled" | string;

async function getOrderStatus(orderId: string): Promise<OrderStatus> {
   try {
      const response = await fetch(
         "https://www.bybit.com/x-api/fiat/otc/order/info",
         {
            method: "POST", // <-- –í–ê–ñ–ù–û
            headers: {
               "Content-Type": "application/json;charset=UTF-8",
               accept: "application/json",
               origin: "https://www.bybit.com",

               // —Å—é–¥–∞ –¥–æ–±–∞–≤—å –Ω—É–∂–Ω—ã–µ –∫—É–∫–∏/—Ç–æ–∫–µ–Ω—ã/—Ö—ç–¥–µ—Ä—ã
            },
            body: JSON.stringify({
               orderId: orderId,
            }),
            credentials: "include", // –µ—Å–ª–∏ –Ω—É–∂–Ω—ã cookies
         }
      );

      const result = await response.json();

      return result.result.status === 50
         ? "completed"
         : result.result.status === 40
            ? "cancelled"
            : "pending";
   } catch (err) {
      console.error("‚ùå Fetch error:", err);
      return "error";
   }
}

export async function getUsedCard(orderId: string): Promise<Card | null> {
   try {
      const cards: Card[] = loadCards()

      const res = await fetch(
         "https://www.bybit.com/x-api/fiat/otc/order/message/listpage",
         {
            method: "POST",
            headers: {
               "Content-Type": "application/json;charset=UTF-8",
               accept: "application/json",
               origin: "https://www.bybit.com",
            },
            body: JSON.stringify({
               orderId: orderId,
               currentPage: "1",
               size: "100",
            }),
            credentials: "include",
         }
      ).then((response) => response.json());

      console.log("üì® –û—Ç–≤–µ—Ç –æ—Ç API:", res);

      const messages = res.result.result.map((m: any) => m.message);
      console.log("üí¨ Messages:", messages);

      let foundCard: Card | null = null;

      messages.forEach((message: string) => {
         console.log("‚û°Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º message:", message);

         switch (message) {
            case "79525176865 –¢–∞—Ç—å—è–Ω–∞ –ì —Å–±–µ—Ä":
            case "2202208354725872":
            case "–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫üíö":
               foundCard = cards.find((c: Card) => c.id === "mamaSber") || null
               break;

            case "79525181633 –ù–∏–∫–∏—Ç–∞ –ö —Å–±–µ—Ä":
            case "2202208354718000":
            case "–í–∑a–∏–º–Ω—ã–π –ª–∞–π–∫üíö":
               foundCard = cards.find((c: Card) => c.id === "papaSber") || null
               break;

            case "79514513792 –°–µ—Ä–∞—Ñ–∏–º –ì —Å–±–µ—Ä":
            case "2202208034462813":
            case "–í–∑–∞–∏–º–Ω—ã–π –ªa–π–∫üíö":
               foundCard = cards.find((c: Card) => c.id === "seraphimSber") || null
               break;

            case "79514513792 –°–µ—Ä–∞—Ñ–∏–º –ì —Ç–±–∞–Ω–∫":
            case "2200701913770423":
            case "–í–∑–∞–∏–º–Ω—ã–π –ªa–π–∫üíõ":
               foundCard = cards.find((c: Card) => c.id === "seraphimTbank") || null
               break;

            case "79227518402 –ì–∞–ª–∏–Ω–∞ –ì —Ç–±–∞–Ω–∫":
            case "2200701940041368":
            case "–í–∑a–∏–º–Ω—ã–π –ª–∞–π–∫üíõ":
               foundCard = cards.find((c: Card) => c.id === "galyaTbank") || null
               break;
         }

         if (foundCard) {
            console.log("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞:", foundCard);
         } else {
            console.log("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è message:", message);
         }
      });

      return foundCard;
   } catch (error) {
      console.error("üî• –û—à–∏–±–∫–∞ –≤ getOrderCard:", error);
   }

   return null;
}


// ==== –û—Å–Ω–æ–≤–Ω–æ–π –≤–æ—Ç—á–µ—Ä ====
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHECK_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥
const MAX_ATTEMPTS = 360; // 30 –º–∏–Ω—É—Ç
const API_URL = "https://orders-finances-68zktfy1k-ospa2s-projects.vercel.app/api/orders";

// –¢–∏–ø—ã
interface OrderData {
   order: Order;
   card: Card;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
class StorageHelper {
   static safeGetJSON<T>(key: string, fallback: T): T {
      try {
         const data = localStorage.getItem(key);
         return data ? JSON.parse(data) : fallback;
      } catch (error) {
         console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${key} –∏–∑ localStorage:`, error);
         return fallback;
      }
   }

   static safeSetJSON(key: string, value: any): boolean {
      try {
         localStorage.setItem(key, JSON.stringify(value));
         return true;
      } catch (error) {
         console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${key} –≤ localStorage:`, error);
         return false;
      }
   }

   static getOrders(): OrderData[] {
      return this.safeGetJSON<OrderData[]>("!orders", []);
   }

   static setOrders(orders: OrderData[]): void {
      this.safeSetJSON("!orders", orders);
   }

   static getCards(): Card[] {
      return this.safeGetJSON<Card[]>("!cards", []);
   }

   static setCards(cards: Card[]): void {
      this.safeSetJSON("!cards", cards);
   }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function sendOrderToServer(orderData: OrderData): Promise<void> {
   return new Promise((resolve, reject) => {
      GM_xmlhttpRequest({
         method: "POST",
         url: API_URL,
         headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
         },
         data: JSON.stringify(orderData),
         onload: (response: any): void => {
            console.log(
               "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä:",
               response.status,
               response.responseText
            );
            resolve();
         },
         onerror: (response: any): void => {
            console.error(
               "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:",
               response.status,
               response.statusText
            );
            reject(new Error(response.statusText));
         },
      });
   });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
function removeOrderFromStorage(orderId: string): OrderData | null {
   const orders = StorageHelper.getOrders();
   const orderData = orders.find((o) => o.order["Order No."] === orderId);

   if (!orderData) {
      console.warn(`–û—Ä–¥–µ—Ä ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage`);
      return null;
   }

   const filteredOrders = orders.filter(
      (order) => order.order["Order No."] !== orderId
   );
   StorageHelper.setOrders(filteredOrders);

   return orderData;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã
function updateCardBalance(cardId: string, balanceChange: number): void {
   const cards: Card[] = loadCards()
   const updatedCards = cards.map((c) => {
      if (c.id === cardId) {
         return {
            ...c,
            balance: c.balance + balanceChange,
            turnover: c.turnover + Math.abs(balanceChange),
         };
      }
      return c;
   });
   StorageHelper.setCards(updatedCards);
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
function restoreCardBalance(originalCard: Card): void {
   // originalCard - —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
   const cards: Card[] = loadCards()
   const updatedCards = cards.map((c) =>
      c.id === originalCard.id ? { ...originalCard } : c
   );
   StorageHelper.setCards(updatedCards);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
async function handleCompletedOrder(
   orderId: string,
   originalCard: Card,
   orderData: OrderData
): Promise<void> {
   console.log(`‚úÖ –û—Ä–¥–µ—Ä ${orderId} –∑–∞–≤–µ—Ä—à—ë–Ω`);

   try {
      const actuallyUsedCard = await getUsedCard(orderId);

      if (actuallyUsedCard) {
         restoreCardBalance(originalCard);// –±–∞–ª–∞–Ω—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
         let rubleAmount = parseFloat(orderData.order["Fiat Amount"]);
         orderData.order.Type === "BUY" ? rubleAmount = -rubleAmount : rubleAmount = rubleAmount
         updateCardBalance(actuallyUsedCard.id, rubleAmount);// –±–∞–ª–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è–µ–º.
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      orderData.order.Status = "Completed";
      await sendOrderToServer(orderData);
   } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ${orderId}:`, error);
      throw error;
   }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
async function handleCancelledOrder(
   orderId: string,
   originalCard: Card,
   orderData: OrderData
): Promise<void> {
   console.log(`‚ùå –û—Ä–¥–µ—Ä ${orderId} –æ—Ç–º–µ–Ω—ë–Ω`);

   try {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã
      restoreCardBalance(originalCard);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      orderData.order.Status = "Cancelled";
      await sendOrderToServer(orderData);
   } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ${orderId}:`, error);
      throw error;
   }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (completed –∏–ª–∏ cancelled)
async function handleOrderCompletion(
   orderId: string,
   originalCard: Card,
   status: string
): Promise<void> {
   const orderData = removeOrderFromStorage(orderId);

   if (!orderData) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      return;
   }

   if (status === "completed") {
      await handleCompletedOrder(orderId, originalCard, orderData);
   } else if (status === "cancelled") {
      await handleCancelledOrder(orderId, originalCard, orderData);
   }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –æ—Ä–¥–µ—Ä–æ–º
export function watchOrder(orderId: string, card: Card): () => void {
   let attemptCount = 0;
   let consecutiveErrors = 0;
   const MAX_CONSECUTIVE_ERRORS = 5;

   const interval = setInterval(async () => {
      try {
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
         if (attemptCount++ >= MAX_ATTEMPTS) {
            console.error(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
            clearInterval(interval);
            return;
         }

         // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
         const status = await getOrderStatus(orderId);
         console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ ${orderId}: ${status} (–ø–æ–ø—ã—Ç–∫–∞ ${attemptCount}/${MAX_ATTEMPTS})`);

         // –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
         consecutiveErrors = 0;

         // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
         if (status === "completed" || status === "cancelled") {
            clearInterval(interval);
            await handleOrderCompletion(orderId, card, status);
         }
      } catch (error) {
         consecutiveErrors++;
         console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ ${orderId} (${consecutiveErrors}/${MAX_CONSECUTIVE_ERRORS}):`,
            error
         );

         // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –æ—à–∏–±–æ–∫
         if (consecutiveErrors >= MAX_CONSECUTIVE_ERRORS) {
            console.error(`üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.`);
            clearInterval(interval);
         }
      }
   }, CHECK_INTERVAL);

   // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
   return () => {
      console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –æ—Ä–¥–µ—Ä–æ–º ${orderId}`);
      clearInterval(interval);
   };
}

// ==== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ====

export function initFetchInterceptor() {
   // –≠—Ç–æ—Ç –∫–æ–¥ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç XHR, –∞ –Ω–µ fetch.

   function watchCurAds() {
      let lastValue = localStorage.getItem("curAds");

      setInterval(async () => {
         const newValue = localStorage.getItem("curAds");//—Ç–µ–∫—É—â–∏–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É(–æ–∫–æ–ª–æ 20 —à—Ç—É–∫ –æ–±—ã—á–Ω–æ)

         if (newValue !== lastValue && newValue && window.location.href.includes("sell")) {
            lastValue = newValue;

            try {
               const body = JSON.parse(newValue);

               // 0 = Sell

               onlineAdsData = body || [];

               enhanceAdRows(onlineAdsData);
               setupSellButtonListener();

               backgroundProcessAds();


            } catch (err) {
               console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ unknownUserIds:", err);
            }
         }
      }, 1000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
   }

   watchCurAds();
   const originalFetch = window.fetch;



   function watchCurOrders() {
      setInterval(async () => {
         const newValue = localStorage.getItem("tempSellData");

         if (newValue) {

            try {
               const curOrders = JSON.parse(newValue);
               const data = curOrders[0];

               const req = data.req;

               const res = data.res;

               // 0 = Sell

               sendSellData(req, res);
               curOrders.shift();
               localStorage.setItem("tempSellData", JSON.stringify(curOrders));


            } catch (err) {
               console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ unknownUserIds:", err);
            }
         }
      }, 1000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
   }

   watchCurOrders();
   window.fetch = async (...args) => {
      const url = args[0].toString();
      const options = args[1];
      // –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Requestly, —Ç.–∫. –∑–¥–µ—Å—å —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤ –±–∞–∑—É
      if (url.includes("x-api/fiat/otc/order/create") && options?.body) {

         const body: OrderPayload = JSON.parse(options.body as string);

         if (body.side === "1" && body.securityRiskToken !== "") {
            // 1 = Sell
            const response = await originalFetch(...args);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit

            response
               .clone()
               .json()
               .then((res: CreateResponse) => sendSellData(body, res));
            return response;
         }
      }

      return originalFetch(...args);
   };
}

function setupSellButtonListener() {
   // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
   if (currentButtonClickHandler) {
      document.removeEventListener("click", currentButtonClickHandler);
   }

   currentButtonClickHandler = (e: MouseEvent) => {

      const btn = (e.target as HTMLElement).closest("button");
      if (btn && btn.innerText.includes("–ü—Ä–æ–¥–∞—Ç—å USDT")) {
         const index = getRowIndex(btn);

         if (index !== -1 && onlineAdsData[index]) {
            handleModalOpening(onlineAdsData[index], e);
         }
      }
   };

   document.addEventListener("click", currentButtonClickHandler);
}
